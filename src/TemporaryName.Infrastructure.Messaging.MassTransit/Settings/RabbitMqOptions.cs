// src/TemporaryName.Infrastructure.Messaging.MassTransit/Settings/RabbitMqOptions.cs
using System.Collections.Generic;

namespace TemporaryName.Infrastructure.Messaging.MassTransit.Settings;

public class RabbitMqSslOptions
{
    public bool Enabled { get; set; } = false;
    public string? ServerName { get; set; } // SNI
    public string? CertPath { get; set; }
    public string? CertPassphrase { get; set; }
    // Add other System.Security.Authentication.SslProtocols options if needed
    public System.Security.Authentication.SslProtocols? Protocol { get; set; }
    public bool CheckCertificateRevocation { get; set; } = true;
    // public System.Net.Security.EncryptionPolicy EncryptionPolicy { get; set; } = System.Net.Security.EncryptionPolicy.RequireEncryption;
    public string? AcceptablePolicyErrors { get; set; } // Comma-separated SslPolicyErrors enum values
}

public class RabbitMqBindingOptions // For more granular control, typically handled by MT conventions
{
    public string? ExchangeName { get; set; }
    public string ExchangeType { get; set; } = "fanout"; // direct, topic, headers
    public bool DurableExchange { get; set; } = true;
    public bool AutoDeleteExchange { get; set; } = false;

    public string? QueueName { get; set; } // Usually auto-generated by MassTransit
    public bool DurableQueue { get; set; } = true;
    public bool ExclusiveQueue { get; set; } = false;
    public bool AutoDeleteQueue { get; set; } = false;

    public string? RoutingKey { get; set; } // For direct/topic exchanges
    public Dictionary<string, object>? QueueArguments { get; set; } // x-max-priority, x-message-ttl, etc.
    public Dictionary<string, object>? ExchangeArguments { get; set; }
    public Dictionary<string, object>? BindingArguments { get; set; }
}

public class RabbitMqPublisherConfirmationOptions
{
    public bool Enabled { get; set; } = true;
    /// <summary>
    /// Timeout for publisher confirmations in milliseconds.
    /// </summary>
    public int TimeoutMs { get; set; } = 5000; // 5 seconds
}

public class RabbitMqOptions
{
    public string Host { get; set; } = "localhost";
    public ushort Port { get; set; } = 5672;
    public string VirtualHost { get; set; } = "/";
    public string Username { get; set; } = "guest";
    public string Password { get; set; } = "guest";

    public RabbitMqSslOptions Ssl { get; set; } = new();

    /// <summary>
    /// Connection attempt timeout in milliseconds.
    /// </summary>
    public int RequestedConnectionTimeoutMs { get; set; } = 10000; // 10 seconds

    /// <summary>
    /// Heartbeat interval in seconds.
    /// </summary>
    public ushort RequestedHeartbeatSecs { get; set; } = 60;

    /// <summary>
    /// Prefetch count for consumers. Controls how many messages a consumer receives at once.
    /// </summary>
    public ushort PrefetchCount { get; set; } = 16;

    /// <summary>
    /// Concurrency limit for consumer message processing.
    /// Default is null (no limit, uses PrefetchCount as a soft guide).
    /// </summary>
    public int? ConcurrencyLimit { get; set; }

    /// <summary>
    /// If true, uses RabbitMQ's Delayed Message Exchange plugin for message scheduling.
    /// Requires the plugin to be installed on the RabbitMQ server.
    /// </summary>
    public bool UseDelayedExchangeMessageScheduler { get; set; } = true; // Recommended for reliable scheduling

    /// <summary>
    /// Enables publisher confirmations for more reliable publishing.
    /// </summary>
    public RabbitMqPublisherConfirmationOptions PublisherConfirmations { get; set; } = new();


    // --- MassTransit Outbox Pattern (for sends originating from this service, not for the relay) ---
    /// <summary>
    /// Enables MassTransit's in-memory outbox. Useful for development or if EF Core outbox is not configured.
    /// Guarantees that messages are sent only after the primary operation (e.g., DB transaction) completes.
    /// </summary>
    public bool UseInMemoryOutbox { get; set; } = false;

    /// <summary>
    /// Enables MassTransit's Entity Framework Core outbox.
    /// Requires providing the DbContext type and configuring its integration.
    /// Set `DbContextTypeFullName` to your application's DbContext full name.
    /// </summary>
    public bool UseEntityFrameworkCoreOutbox { get; set; } = false;
    public string? EntityFrameworkCoreOutboxDbContextTypeFullName { get; set; } // e.g., "MyProject.Infrastructure.Persistence.AppDbContext"
    public int EntityFrameworkCoreOutboxQueryDelayMs { get; set; } = 1000; // How often to query outbox
    public int EntityFrameworkCoreOutboxQueryMessageLimit { get; set; } = 100; // Max messages per query

    /// <summary>
    /// Retry policies for consumers on this RabbitMQ transport.
    /// </summary>
    public ConsumerRetryOptions ConsumerRetry { get; set; } = new();

    /// <summary>
    /// Dead letter strategy for this RabbitMQ transport.
    /// </summary>
    public DeadLetterStrategyOptions DeadLetterStrategy { get; set; } = new();

    /// <summary>
    /// Optional: Custom name for the bus instance, useful if multiple buses are in one process.
    /// </summary>
    public string? BusInstanceName { get; set; }

    /// <summary>
    /// If true, enables client-side Nagle algorithm (batching small messages). Default is false.
    /// Setting to true can improve throughput but may increase latency.
    /// </summary>
    public bool UseNagleAlgorithm { get; set; } = false;

    /// <summary>
    /// For advanced users: dictionary of client-provided connection properties.
    /// </summary>
    public Dictionary<string, object>? ClientProvidedConnectionProperties { get; set; }

    /// <summary>
    /// Set to true to use Single Active Consumer feature on queues where applicable.
    /// Ensure your RabbitMQ version and configuration support this.
    /// </summary>
    public bool UseSingleActiveConsumer { get; set; } = false;

    /// <summary>
    /// Optional: Defines specific bindings. Usually MassTransit conventions are sufficient.
    /// Key is typically a message type name or endpoint name.
    /// </summary>
    public Dictionary<string, RabbitMqBindingOptions>? CustomBindings { get; set; }
}